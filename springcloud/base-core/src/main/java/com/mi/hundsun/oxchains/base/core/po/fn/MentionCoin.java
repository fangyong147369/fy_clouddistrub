package com.mi.hundsun.oxchains.base.core.po.fn;import com.fasterxml.jackson.annotation.JsonFormat;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;import  java.math.BigDecimal;/** * 提币管理实体信息<br> * * @author bin * @date   2018-04-15 06:13:26 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "提币管理")@Table(name = "fn_mention_coin")public class MentionCoin extends GenericPo<Integer> {    public static final String TABLE_NAME = "fn_mention_coin";		/**用户ID**/	@ApiModelProperty(value = "用户ID")	private Integer userId;	/**订单号**/	@ApiModelProperty(value = "订单号")	private String orderNo;	/**平台付币地址 管理员在审核时选择**/	@ApiModelProperty(value = "平台付币地址 管理员在审核时选择")	private String platPayAddr;	/**客户提币地址**/	@ApiModelProperty(value = "客户提币地址")	private String userMentionAddr;	/**提币数量**/	@ApiModelProperty(value = "提币数量")	private BigDecimal amount;	/**手续费**/	@ApiModelProperty(value = "手续费")	private BigDecimal serviceFee;	/**区块链流水号**/	@ApiModelProperty(value = "区块链流水号")	private String txId;	/**币种**/	@ApiModelProperty(value = "币种")	private String coinCurrency;	/**状态 0,待审核:pending;1,待录入:pend_enter;2不通过:no_pass;3,已成功:success**/	@ApiModelProperty(value = "状态 0,待审核:pending;1,待录入:pend_enter;2不通过:no_pass;3,已成功:success")	private Integer state;	@Transient	private String stateFormatter ;	/**录入时间**/	@ApiModelProperty(value = "录入时间")	@JSONField(format = "yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	private Date enteringTime;	/**录入人**/	@ApiModelProperty(value = "录入人")	private String keyboarder;	/**确认员**/	@ApiModelProperty(value = "确认员")	private String confirmor;	/**确认时间**/	@ApiModelProperty(value = "确认时间")	@JSONField(format = "yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")	private Date confirmTime;	/**确认备注**/	@ApiModelProperty(value = "确认备注")	private String confirmRemark;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**状态 0,待审核:pending;1,待录入:pend_enter;2,不通过:no_pass;3,已成功:success**/	public enum STATE {			/**0,待审核:pending**/		PENDING("待审核",0),			/**1,待录入:pend_enter**/		PEND_ENTER("待录入",1),			/**2,不通过:no_pass**/		NO_PASS("不通过",2),			/**3,已成功:success**/		SUCCESS("已成功",3);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public MentionCoin(){}    public MentionCoin(Consumer<MentionCoin> consumer){    consumer.accept(this);    }}