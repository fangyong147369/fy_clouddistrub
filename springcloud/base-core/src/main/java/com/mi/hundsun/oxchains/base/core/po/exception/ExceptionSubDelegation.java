package com.mi.hundsun.oxchains.base.core.po.exception;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;import  java.math.BigDecimal;/** * 异常子委托信息实体信息<br> * * @author bin * @date   2018-04-24 02:46:39 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "异常子委托信息")@Table(name = "exception_sub_delegation")public class ExceptionSubDelegation extends GenericPo<Integer> {    public static final String TABLE_NAME = "exception_sub_delegation";		/**用户ID**/	@ApiModelProperty(value = "用户ID")	private Integer userId;	/**币种**/	@ApiModelProperty(value = "币种")	private String coinCurrency;	/**资产代码**/	@ApiModelProperty(value = "资产代码")	private String coinCode;	/**所属主委托编号**/	@ApiModelProperty(value = "所属主委托编号")	private String mainDelegateNo;	/**委托编号**/	@ApiModelProperty(value = "委托编号")	private String entrustNo;	/**委托量**/	@ApiModelProperty(value = "委托量")	private BigDecimal amount;	/**委托价**/	@ApiModelProperty(value = "委托价")	private BigDecimal price;	/**交易额**/	@ApiModelProperty(value = "交易额")	private BigDecimal gmv;	/**成交价**/	@ApiModelProperty(value = "成交价")	private BigDecimal dealPrice;	/**成交量**/	@ApiModelProperty(value = "成交量")	private BigDecimal dealAmount;	/**委托方向 1,买入:buyIn:2,卖出:sellOut**/	@ApiModelProperty(value = "委托方向 1,买入:buyIn:2,卖出:sellOut")	private Integer direction;	@Transient	private String directionFormatter ;	/**委托方式 1,市价:market;2,限价:limited**/	@ApiModelProperty(value = "委托方式 1,市价:market;2,限价:limited")	private Integer style;	@Transient	private String styleFormatter ;	/**交易所**/	@ApiModelProperty(value = "交易所")	private String exchange;	/**交易母账号**/	@ApiModelProperty(value = "交易母账号")	private String motherAccount;	/**状态 1,下单申请(已报):reported;2,交易中:trading;3,撤单中:revoking;4,已报待撤:waitRevoke;5,已撤单:revoked;6,部分撤单:partOfRevoke;7,下单失败:failed;8,已成交:deal**/	@ApiModelProperty(value = "状态 1,下单申请(已报):reported;2,交易中:trading;3,撤单中:revoking;4,已报待撤:waitRevoke;5,已撤单:revoked;6,部分撤单:partOfRevoke;7,下单失败:failed;8,已成交:deal")	private Integer state;	@Transient	private String stateFormatter ;	/**异常描述**/	@ApiModelProperty(value = "异常描述")	private String exDesc;	/**处理结果描述**/	@ApiModelProperty(value = "处理结果描述")	private String handResult;	public String getDirectionFormatter() {	    if(null == directionFormatter || "".equals(directionFormatter)){		    return DIRECTION.getValue(getDirection());		}	    return this.directionFormatter;	}	public void setDirectionFormatter(String directionFormatter) {	    this.directionFormatter=directionFormatter;	}	public String getStyleFormatter() {	    if(null == styleFormatter || "".equals(styleFormatter)){		    return STYLE.getValue(getStyle());		}	    return this.styleFormatter;	}	public void setStyleFormatter(String styleFormatter) {	    this.styleFormatter=styleFormatter;	}	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**1,买入:buyIn:2,卖出:sellOut**/	public enum DIRECTION {			/**1,买入:buyIn:2,卖出:sellOut**/		BUYIN("买入",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private DIRECTION(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (DIRECTION direction : DIRECTION.values()) {				if (direction.code == code) { 					return direction.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (DIRECTION direction : DIRECTION.values()) {				if (direction.value.equals(value)) { 					return direction.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (DIRECTION direction : DIRECTION.values()) {					map.put(direction.code,direction.value);				}			}			return map;		}	}		/**1,市价:market<br>2,限价:limited**/	public enum STYLE {			/**1,市价:market**/		MARKET("市价",1),			/**2,限价:limited**/		LIMITED("限价",2);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STYLE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STYLE style : STYLE.values()) {				if (style.code == code) { 					return style.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STYLE style : STYLE.values()) {				if (style.value.equals(value)) { 					return style.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STYLE style : STYLE.values()) {					map.put(style.code,style.value);				}			}			return map;		}	}		/**1,下单申请(已报):reported<br>2,交易中:trading<br>3,撤单中:revoking<br>4,已报待撤:waitRevoke<br>5,已撤单:revoked<br>6,部分撤单:partOfRevoke<br>7,下单失败:failed<br>8,已成交:deal**/	public enum STATE {			/**1,下单申请(已报):reported**/		REPORTED("下单申请(已报)",1),			/**2,交易中:trading**/		TRADING("交易中",2),			/**3,撤单中:revoking**/		REVOKING("撤单中",3),			/**4,已报待撤:waitRevoke**/		WAITREVOKE("已报待撤",4),			/**5,已撤单:revoked**/		REVOKED("已撤单",5),			/**6,部分撤单:partOfRevoke**/		PARTOFREVOKE("部分撤单",6),			/**7,下单失败:failed**/		FAILED("下单失败",7),			/**8,已成交:deal**/		DEAL("已成交",8);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public ExceptionSubDelegation(){}    public ExceptionSubDelegation(Consumer<ExceptionSubDelegation> consumer){    consumer.accept(this);    }}