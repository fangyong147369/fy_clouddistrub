package com.mi.hundsun.oxchains.base.core.po.user;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 用户提币地址表实体信息<br> * * @author lzj * @date   2018-04-14 10:30:07 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "用户提币地址表")@Table(name = "user_address")public class UserAddress extends GenericPo<Integer> {    public static final String TABLE_NAME = "user_address";		/**用户ID**/	@ApiModelProperty(value = "用户ID")	private Integer userId;	/**币种 BTC,BTC:T1;ETH,ETH:T2;USDT,USDT:T3**/	@ApiModelProperty(value = "币种 BTC,BTC:T1;ETH,ETH:T2;USDT,USDT:T3")	private String coinCurrency;	/**钱包地址**/	@ApiModelProperty(value = "钱包地址")	private String address;	/**是否默认 0,否:no;1,是:yes**/	@ApiModelProperty(value = "是否默认 0,否:no;1,是:yes")	private Integer isDefault;	@Transient	private String isDefaultFormatter ;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getIsDefaultFormatter() {	    if(null == isDefaultFormatter || "".equals(isDefaultFormatter)){		    return ISDEFAULT.getValue(getIsDefault());		}	    return this.isDefaultFormatter;	}	public void setIsDefaultFormatter(String isDefaultFormatter) {	    this.isDefaultFormatter=isDefaultFormatter;	}	/**0,否:no<br>1,是:yes**/	public enum ISDEFAULT {			/**0,否:no**/		NO("否",0),			/**1,是:yes**/		YES("是",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private ISDEFAULT(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (ISDEFAULT isdefault : ISDEFAULT.values()) {				if (isdefault.code == code) { 					return isdefault.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (ISDEFAULT isdefault : ISDEFAULT.values()) {				if (isdefault.value.equals(value)) { 					return isdefault.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (ISDEFAULT isdefault : ISDEFAULT.values()) {					map.put(isdefault.code,isdefault.value);				}			}			return map;		}	}	/**1,BTC:T1<br>2,ETH:T2<br>3,USDT:T3**/	public enum COINCURRENCY {		/**1,BTC:T1**/		T1("BTC",1),		/**2,ETH:T2**/		T2("ETH",2),		/**3,USDT:T3**/		T3("USDT",3);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private COINCURRENCY(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (COINCURRENCY coincurrenty : COINCURRENCY.values()) {				if (coincurrenty.code == code) {					return coincurrenty.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (COINCURRENCY coincurrenty : COINCURRENCY.values()) {				if (coincurrenty.value.equals(value)) {					return coincurrenty.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (COINCURRENCY coincurrenty : COINCURRENCY.values()) {					map.put(coincurrenty.code,coincurrenty.value);				}			}			return map;		}	}	    public UserAddress(){}    public UserAddress(Consumer<UserAddress> consumer){    consumer.accept(this);    }}