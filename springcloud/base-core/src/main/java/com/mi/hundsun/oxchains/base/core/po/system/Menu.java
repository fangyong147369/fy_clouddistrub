package com.mi.hundsun.oxchains.base.core.po.system;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 系统菜单实体信息<br> * * @author bin * @date   2018-04-11 05:19:47 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统菜单")@Table(name = "s_menu")public class Menu extends GenericPo<Integer> {	public static final String TABLE_NAME = "s_menu";	/**层级**/	@ApiModelProperty(value = "层级")	private Integer level;	/**父级菜单ID**/	@ApiModelProperty(value = "父级菜单ID")	private Integer parentId;	/**父级菜单名称**/	@ApiModelProperty(value = "父级菜单名称")	private String parentName;	/**菜单名称**/	@ApiModelProperty(value = "菜单名称")	private String name;	/**菜单类型：0,目录:catalog;1,菜单:menu;2,按钮:button**/	@ApiModelProperty(value = "菜单类型：0,目录:catalog;1,菜单:menu;2,按钮:button")	private Integer type;	/**访问URL**/	@ApiModelProperty(value = "访问URL")	private String url;	/**菜单图表**/	@ApiModelProperty(value = "菜单图表")	private String icon;	/**排序号**/	@ApiModelProperty(value = "排序号")	private Integer sortNo;	/**菜单描述**/	@ApiModelProperty(value = "菜单描述")	private String description;	/**授权**/	@ApiModelProperty(value = "授权")	private String permission;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	/**0,目录:catalog<br>1,菜单:menu<br>2,按钮:button<br>**/	public enum TYPE {		/**0,目录:catalog**/		CATALOG("目录",0),		/**1,菜单:menu**/		MENU("菜单",1),		/**3,按钮:button**/		BUTTON("按钮",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private TYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (Menu.TYPE type : Menu.TYPE.values()) {				if (type.code == code) {					return type.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (Menu.TYPE type : Menu.TYPE.values()) {				if (type.value.equals(value)) {					return type.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (Menu.TYPE type : Menu.TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}	public Menu(){}	public Menu(Consumer<Menu> consumer){		consumer.accept(this);	}}