package com.mi.hundsun.oxchains.base.core.po.user;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.math.BigDecimal;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 用户风控设置实体信息<br> * * @author bin * @date   2018-04-12 07:55:12 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "用户风控设置")@Table(name = "user_risk_control")public class UserRiskControl extends GenericPo<Integer> {    public static final String TABLE_NAME = "user_risk_control";		/**用户ID**/	@ApiModelProperty(value = "用户ID")	private Integer userId;	/**BTC手续费风控模板编号**/	@ApiModelProperty(value = "BTC手续费风控模板编号")	private String btcServiceChargeTpl;	/**ETH手续费风控模板编号**/	@ApiModelProperty(value = "ETH手续费风控模板编号")	private String ethServiceChargeTpl;	/**净值风控模板编号**/	@ApiModelProperty(value = "净值风控模板编号")	private String netWorthTpl;	/**百分比风控模板编号**/	@ApiModelProperty(value = "百分比风控模板编号")	private String percentTpl;	/**百分比风控期初值**/	@ApiModelProperty(value = "百分比风控期初值")	private BigDecimal percentInitialBalance;	/**是否启用百分比风控 0,否:no;1,是:yes**/	@ApiModelProperty(value = "是否启用百分比风控 0,否:no;1,是:yes")	private Integer isEnableRiskControl;	@Transient	private String isEnableRiskControlFormatter ;	public String getIsEnableRiskControlFormatter() {	    if(null == isEnableRiskControlFormatter || "".equals(isEnableRiskControlFormatter)){		    return ISENABLERISKCONTROL.getValue(getIsEnableRiskControl());		}	    return this.isEnableRiskControlFormatter;	}	public void setIsEnableRiskControlFormatter(String isEnableRiskControlFormatter) {	    this.isEnableRiskControlFormatter=isEnableRiskControlFormatter;	}	/**0,否:no<br>1,是:yes**/	public enum ISENABLERISKCONTROL {			/**0,否:no**/		NO("否",0),			/**1,是:yes**/		YES("是",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private ISENABLERISKCONTROL(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (ISENABLERISKCONTROL isenableriskcontrol : ISENABLERISKCONTROL.values()) {				if (isenableriskcontrol.code == code) { 					return isenableriskcontrol.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (ISENABLERISKCONTROL isenableriskcontrol : ISENABLERISKCONTROL.values()) {				if (isenableriskcontrol.value.equals(value)) { 					return isenableriskcontrol.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (ISENABLERISKCONTROL isenableriskcontrol : ISENABLERISKCONTROL.values()) {					map.put(isenableriskcontrol.code,isenableriskcontrol.value);				}			}			return map;		}	}	    public UserRiskControl(){}    public UserRiskControl(Consumer<UserRiskControl> consumer){    consumer.accept(this);    }}