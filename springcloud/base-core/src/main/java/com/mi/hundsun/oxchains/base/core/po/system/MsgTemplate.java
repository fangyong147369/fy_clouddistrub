package com.mi.hundsun.oxchains.base.core.po.system;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 消息模板实体信息<br> * * @author bin * @date   2018-04-24 02:27:02 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "消息模板")@Table(name = "tpl_msg_template")public class MsgTemplate extends GenericPo<Integer> {	public static final String TABLE_NAME = "tpl_msg_template";	/**1,系统消息:sys;2,业务消息:biz**/	@ApiModelProperty(value = "1,系统消息:sys;2,业务消息:biz")	private Integer type;	@Transient	private String typeFormatter ;	/**模板名称**/	@ApiModelProperty(value = "模板名称")	private String name;	/**模板标识**/	@ApiModelProperty(value = "模板标识")	private String nid;	/**短信开关 0,关闭:close;1,开启:open**/	@ApiModelProperty(value = "短信开关 0,关闭:close;1,开启:open")	private Integer smsState;	@Transient	private String smsStateFormatter ;	/**短信内容**/	@ApiModelProperty(value = "短信内容")	private String smsContent;	/**邮件开关 0,关闭:close;1,开启:open**/	@ApiModelProperty(value = "邮件开关 0,关闭:close;1,开启:open")	private Integer emailState;	@Transient	private String emailStateFormatter ;	/**邮件标题**/	@ApiModelProperty(value = "邮件标题")	private String emailTitle;	/**邮件内容**/	@ApiModelProperty(value = "邮件内容")	private String emailContent;	/**站内信开关 0,关闭:close;1,开启:open**/	@ApiModelProperty(value = "站内信开关 0,关闭:close;1,开启:open")	private Integer letterState;	@Transient	private String letterStateFormatter ;	/**站内信内容**/	@ApiModelProperty(value = "站内信内容")	private String letterContent;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getTypeFormatter() {		if(null == typeFormatter || "".equals(typeFormatter)){			return TYPE.getValue(getType());		}		return this.typeFormatter;	}	public void setTypeFormatter(String typeFormatter) {		this.typeFormatter=typeFormatter;	}	public String getSmsStateFormatter() {		if(null == smsStateFormatter || "".equals(smsStateFormatter)){			return SMSSTATE.getValue(getSmsState());		}		return this.smsStateFormatter;	}	public void setSmsStateFormatter(String smsStateFormatter) {		this.smsStateFormatter=smsStateFormatter;	}	public String getEmailStateFormatter() {		if(null == emailStateFormatter || "".equals(emailStateFormatter)){			return EMAILSTATE.getValue(getEmailState());		}		return this.emailStateFormatter;	}	public void setEmailStateFormatter(String emailStateFormatter) {		this.emailStateFormatter=emailStateFormatter;	}	public String getLetterStateFormatter() {		if(null == letterStateFormatter || "".equals(letterStateFormatter)){			return LETTERSTATE.getValue(getLetterState());		}		return this.letterStateFormatter;	}	public void setLetterStateFormatter(String letterStateFormatter) {		this.letterStateFormatter=letterStateFormatter;	}	/**1,系统消息:sys<br>2,业务消息:biz**/	public enum TYPE {		/**1,系统消息:sys**/		SYS("系统消息",1),		/**2,业务消息:biz**/		BIZ("业务消息",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private TYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) {					return type.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) {					return type.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TYPE type : TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}	/**0,关闭:close<br>1,开启:open**/	public enum SMSSTATE {		/**0,关闭:close**/		CLOSE("关闭",0),		/**1,开启:open**/		OPEN("开启",1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private SMSSTATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (SMSSTATE smsstate : SMSSTATE.values()) {				if (smsstate.code == code) {					return smsstate.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (SMSSTATE smsstate : SMSSTATE.values()) {				if (smsstate.value.equals(value)) {					return smsstate.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (SMSSTATE smsstate : SMSSTATE.values()) {					map.put(smsstate.code,smsstate.value);				}			}			return map;		}	}	/**0,关闭:close<br>1,开启:open**/	public enum EMAILSTATE {		/**0,关闭:close**/		CLOSE("关闭",0),		/**1,开启:open**/		OPEN("开启",1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private EMAILSTATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (EMAILSTATE emailstate : EMAILSTATE.values()) {				if (emailstate.code == code) {					return emailstate.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (EMAILSTATE emailstate : EMAILSTATE.values()) {				if (emailstate.value.equals(value)) {					return emailstate.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (EMAILSTATE emailstate : EMAILSTATE.values()) {					map.put(emailstate.code,emailstate.value);				}			}			return map;		}	}	/**0,关闭:close<br>1,开启:open**/	public enum LETTERSTATE {		/**0,关闭:close**/		CLOSE("关闭",0),		/**1,开启:open**/		OPEN("开启",1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private LETTERSTATE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (LETTERSTATE letterstate : LETTERSTATE.values()) {				if (letterstate.code == code) {					return letterstate.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (LETTERSTATE letterstate : LETTERSTATE.values()) {				if (letterstate.value.equals(value)) {					return letterstate.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (LETTERSTATE letterstate : LETTERSTATE.values()) {					map.put(letterstate.code,letterstate.value);				}			}			return map;		}	}	public MsgTemplate(){}	public MsgTemplate(Consumer<MsgTemplate> consumer){		consumer.accept(this);	}}