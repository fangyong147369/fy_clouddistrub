package com.mi.hundsun.oxchains.base.core.po.system;import com.fasterxml.jackson.annotation.JsonFormat;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 后台系统操作日志实体信息<br> * * @author bin * @date   2018-04-24 02:17:16 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "后台系统操作日志")@Table(name = "s_opt_log")public class OptLog extends GenericPo<Integer> {	public static final String TABLE_NAME = "s_opt_log";	/**失败原因 0,没有权限:noAuthority;1,URL不存在:URLunexist;2,未登录:unlogin;3,业务代码异常:exception**/	@ApiModelProperty(value = "失败原因 0,没有权限:noAuthority;1,URL不存在:URLunexist;2,未登录:unlogin;3,业务代码异常:exception")	private Integer cause;	@Transient	private String causeFormatter ;	/**cookie数据**/	@ApiModelProperty(value = "cookie数据")	private String cookie;	/**描述**/	@ApiModelProperty(value = "描述")	private Object desc;	/**客户端ip**/	@ApiModelProperty(value = "客户端ip")	private String ip;	/**访问方法**/	@ApiModelProperty(value = "访问方法")	private String method;	/**源引用**/	@ApiModelProperty(value = "源引用")	private String referer;	/**请求路径**/	@ApiModelProperty(value = "请求路径")	private String requestpath;	/**访问开始日期**/	@ApiModelProperty(value = "访问开始日期")	@JSONField(format="yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8",pattern="yyyy-MM-dd HH:mm:ss")	private Date startdate;	/**访问结束日期**/	@ApiModelProperty(value = "访问结束日期")	@JSONField(format="yyyy-MM-dd HH:mm:ss")	@JsonFormat(timezone = "GMT+8",pattern="yyyy-MM-dd HH:mm:ss")	private Date enddate;	/**访问耗时**/	@ApiModelProperty(value = "访问耗时")	private Integer took;	/**方法执行状态 0,失败:fail;1,正常:normal**/	@ApiModelProperty(value = "方法执行状态 0,失败:fail;1,正常:normal")	private Integer status;	@Transient	private String statusFormatter ;	/**访问代理信息**/	@ApiModelProperty(value = "访问代理信息")	private String useragent;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String accept;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String acceptencoding;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String acceptlanguage;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String connection;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String host;	/**请求头信息**/	@ApiModelProperty(value = "请求头信息")	private String xrequestedwith;	/**创建人**/	@ApiModelProperty(value = "创建人")	private String w;	public String getCauseFormatter() {		if(null == causeFormatter || "".equals(causeFormatter)){			return CAUSE.getValue(getCause());		}		return this.causeFormatter;	}	public void setCauseFormatter(String causeFormatter) {		this.causeFormatter=causeFormatter;	}	public String getStatusFormatter() {		if(null == statusFormatter || "".equals(statusFormatter)){			return STATUS.getValue(getStatus());		}		return this.statusFormatter;	}	public void setStatusFormatter(String statusFormatter) {		this.statusFormatter=statusFormatter;	}	/**0,没有权限:noAuthority<br>1,URL不存在:URLunexist<br>2,未登录:unlogin<br>3,业务代码异常:exception**/	public enum CAUSE {		/**0,没有权限:noAuthority**/		NOAUTHORITY("没有权限",0),		/**1,URL不存在:URLunexist**/		URLUNEXIST("URL不存在",1),		/**2,未登录:unlogin**/		UNLOGIN("未登录",2),		/**3,业务代码异常:exception**/		EXCEPTION("业务代码异常",3);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private CAUSE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (CAUSE cause : CAUSE.values()) {				if (cause.code == code) {					return cause.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (CAUSE cause : CAUSE.values()) {				if (cause.value.equals(value)) {					return cause.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (CAUSE cause : CAUSE.values()) {					map.put(cause.code,cause.value);				}			}			return map;		}	}	/**0,失败:fail<br>1,正常:normal**/	public enum STATUS {		/**0,失败:fail**/		FAIL("失败",0),		/**1,正常:normal**/		NORMAL("正常",1);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private STATUS(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.code == code) {					return status.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.value.equals(value)) {					return status.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATUS status : STATUS.values()) {					map.put(status.code,status.value);				}			}			return map;		}	}	public OptLog(){}	public OptLog(Consumer<OptLog> consumer){		consumer.accept(this);	}}