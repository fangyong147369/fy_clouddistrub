package com.mi.hundsun.oxchains.base.core.po.system;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 通知记录实体信息<br> * * @author bin * @date   2018-04-11 08:32:50 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "通知记录")@Table(name = "s_notice_log")public class NoticeLog extends GenericPo<Integer> {	public static final String TABLE_NAME = "s_notice_log";	/**接收用户ID**/	@ApiModelProperty(value = "接收用户ID")	private Integer userId;	/**编号**/	@ApiModelProperty(value = "编号")	private String nid;	/**类型 1,邮件:email;2,短信:sms;**/	@ApiModelProperty(value = "类型 1,邮件:email;2,短信:sms;")	private Integer type;	@Transient	private String typeFormatter ;	/**1,发送成功:success;2,发送失败:failed**/	@ApiModelProperty(value = "1,发送成功:success;2,发送失败:failed")	private Integer status;	@Transient	private String statusFormatter ;	/**阅读标记:1已读;0未读**/	@ApiModelProperty(value = "阅读标记:1已读;0未读")	private Integer readFlag;	/**标题**/	@ApiModelProperty(value = "标题")	private String title;	/**发送内容**/	@ApiModelProperty(value = "发送内容")	private String content;	/**发送结果信息**/	@ApiModelProperty(value = "发送结果信息")	private String result;	/**接收地址（手机号或者邮箱）**/	@ApiModelProperty(value = "接收地址（手机号或者邮箱）")	private String receiveAddress;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getTypeFormatter() {		if(null == typeFormatter || "".equals(typeFormatter)){			return TYPE.getValue(getType());		}		return this.typeFormatter;	}	public void setTypeFormatter(String typeFormatter) {		this.typeFormatter=typeFormatter;	}	public String getStatusFormatter() {		if(null == statusFormatter || "".equals(statusFormatter)){			return STATUS.getValue(getStatus());		}		return this.statusFormatter;	}	public void setStatusFormatter(String statusFormatter) {		this.statusFormatter=statusFormatter;	}	/**1,邮件:email<br>2,短信:sms<br>**/	public enum TYPE {		/**1,邮件:email**/		EMAIL("邮件",1),		/**2,短信:sms**/		SMS("短信",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private TYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) {					return type.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) {					return type.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TYPE type : TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}	/**1,发送成功:success<br>2,发送失败:failed**/	public enum STATUS {		/**1,发送成功:success**/		SUCCESS("发送成功",1),		/**2,发送失败:failed**/		FAILED("发送失败",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private STATUS(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.code == code) {					return status.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.value.equals(value)) {					return status.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATUS status : STATUS.values()) {					map.put(status.code,status.value);				}			}			return map;		}	}	/**	 * 阅读标记:1已读;2未读(站内信时要用到)	 **/	public enum READ_FLAG {		/**		 * 1,1已读:read		 **/		READ("1已读", 1),		/**		 * 2,2未读:not		 **/		NOT("2未读", 2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private READ_FLAG(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (READ_FLAG readFlag : READ_FLAG.values()) {				if (readFlag.code == code) {					return readFlag.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value || "".equals(value)) {				return null;			}			for (READ_FLAG readFlag : READ_FLAG.values()) {				if (readFlag.value.equals(value)) {					return readFlag.code;				}			}			return null;		}		public static Map<Integer, String> getEnumMap() {			if (map.size() == 0) {				for (STATUS status : STATUS.values()) {					map.put(status.code, status.value);				}			}			return map;		}	}	public NoticeLog(){}	public NoticeLog(Consumer<NoticeLog> consumer){		consumer.accept(this);	}}	