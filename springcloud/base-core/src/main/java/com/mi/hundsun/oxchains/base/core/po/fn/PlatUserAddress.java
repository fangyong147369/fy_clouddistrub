package com.mi.hundsun.oxchains.base.core.po.fn;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 平台分配给客户地址实体信息<br> * * @author bin * @date   2018-04-15 07:49:10 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "平台分配给客户地址")@Table(name = "fn_plat_user_address")public class PlatUserAddress extends GenericPo<Integer> {    public static final String TABLE_NAME = "fn_plat_user_address";		/**分配用户ID**/	@ApiModelProperty(value = "分配用户ID")	private Integer userId;	/**地址别名**/	@ApiModelProperty(value = "地址别名")	private String alias;	/**地址**/	@ApiModelProperty(value = "地址")	private String address;    /**地址**/    @ApiModelProperty(value = "地址二维码码路径")    private String addressQrCodePath;	/**币种**/	@ApiModelProperty(value = "币种")	private String coinCurrency;	/**状态 0,未分配:undistributed;1,已分配:distributed**/	@ApiModelProperty(value = "状态 0,未分配:undistributed;1,已分配:distributed")	private Integer state;	@Transient	private String stateFormatter ;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**0,未分配:undistributed<br>1,已分配:distributed**/	public enum STATE {			/**0,未分配:undistributed**/		UNDISTRIBUTED("未分配",0),			/**1,已分配:distributed**/		DISTRIBUTED("已分配",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public PlatUserAddress(){}    public PlatUserAddress(Consumer<PlatUserAddress> consumer){    consumer.accept(this);    }}