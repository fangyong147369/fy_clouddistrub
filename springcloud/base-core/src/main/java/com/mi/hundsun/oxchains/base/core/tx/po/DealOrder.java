package com.mi.hundsun.oxchains.base.core.tx.po;import com.alibaba.fastjson.annotation.JSONField;import com.fasterxml.jackson.annotation.JsonFormat;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 交易管理-成交订单实体信息<br> * * @author fengting * @date   2018-04-13 09:54:58 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "交易管理-成交订单")@Table(name = "tx_deal_order")public class DealOrder extends GenericPo<Integer> {    public static final String TABLE_NAME = "tx_deal_order";    /**用户ID**/    @ApiModelProperty(value = "用户ID")    private Integer userId;    /**委托编号**/    @ApiModelProperty(value = "委托编号")    private String entrustNo;    /**成交编号**/    @ApiModelProperty(value = "成交编号")    private String businessNo;    /**币种**/    @ApiModelProperty(value = "币种")    private String coinCurrency;    /**资产代码**/    @ApiModelProperty(value = "资产代码")    private String coinCode;    /**成交量**/    @ApiModelProperty(value = "成交量")    private BigDecimal amount;    /**成交价**/    @ApiModelProperty(value = "成交价")    private BigDecimal price;    /**成交额**/    @ApiModelProperty(value = "成交额")    private BigDecimal gmv;    /**交易所**/    @ApiModelProperty(value = "交易所")    private String exchange;    /**交易母账号**/    @ApiModelProperty(value = "交易母账号")    private String motherAccount;    /**是否对账 1,是:yes;0,否:no**/    @ApiModelProperty(value = "是否对账 1,是:yes;0,否:no")    private Integer isConfirm;    @Transient    private String isConfirmFormatter ;    /**状态 1,全部完成:finished;**/    @ApiModelProperty(value = "状态 1,全部完成:finished;")    private Integer state;    @Transient    private String stateFormatter ;    /**委托方向 1,买入:buyIn;2,卖出:sellOut**/    @ApiModelProperty(value = "委托方向 1,买入:buyIn;2,卖出:sellOut")    private Integer direction;    @Transient    private String directionFormatter ;    /**委托方式 1,市价委托:market;2,限价委托:limited**/    @ApiModelProperty(value = "委托方式 1,市价委托:market;2,限价委托:limited")    private Integer style;    @Transient    private String styleFormatter ;    /**交易所收取的手续费**/    @ApiModelProperty(value = "交易所收取的手续费")    private BigDecimal serviceFee;    /**平台收取的手续费**/    @ApiModelProperty(value = "平台收取的手续费")    private BigDecimal platFee;    /**成交时间**/    @ApiModelProperty(value = "成交时间")    @JSONField(format="yyyy-MM-dd HH:mm:ss")    @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")    private Date dealTime;    public String getIsConfirmFormatter() {        if(null == isConfirmFormatter || "".equals(isConfirmFormatter)){            return ISCONFIRM.getValue(getIsConfirm());        }        return this.isConfirmFormatter;    }    public void setIsConfirmFormatter(String isConfirmFormatter) {        this.isConfirmFormatter=isConfirmFormatter;    }    public String getStateFormatter() {        if(null == stateFormatter || "".equals(stateFormatter)){            return STATE.getValue(getState());        }        return this.stateFormatter;    }    public void setStateFormatter(String stateFormatter) {        this.stateFormatter=stateFormatter;    }    public String getDirectionFormatter() {        if(null == directionFormatter || "".equals(directionFormatter)){            return SubDelegation.DIRECTION.getValue(getDirection());        }        return this.directionFormatter;    }    public void setDirectionFormatter(String directionFormatter) {        this.directionFormatter=directionFormatter;    }    public String getStyleFormatter() {        if(null == styleFormatter || "".equals(styleFormatter)){            return SubDelegation.STYLE.getValue(getStyle());        }        return this.styleFormatter;    }    public void setStyleFormatter(String styleFormatter) {        this.styleFormatter=styleFormatter;    }    /**1,是:yes<br>0,否:no**/    public enum ISCONFIRM {        /**1,是:yes**/        YES("是",1),        /**0,否:no**/        NO("否",0);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private ISCONFIRM(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (ISCONFIRM isconfirm : ISCONFIRM.values()) {                if (isconfirm.code == code) {                    return isconfirm.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value  || "".equals(value)) {                return null;            }            for (ISCONFIRM isconfirm : ISCONFIRM.values()) {                if (isconfirm.value.equals(value)) {                    return isconfirm.code;                }            }            return null;        }        public static  Map<Integer, String> getEnumMap() {            if(map.size() == 0){                for (ISCONFIRM isconfirm : ISCONFIRM.values()) {                    map.put(isconfirm.code,isconfirm.value);                }            }            return map;        }    }    /**1,买入:buyIn<br>2,卖出:sellOut**/    public enum DIRECTION {        /**1,买入:buyIn**/        BUYIN("买入",1),        /**2,卖出:sellOut**/        SELLOUT("卖出",2);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private DIRECTION(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (SubDelegation.DIRECTION direction : SubDelegation.DIRECTION.values()) {                if (direction.code == code) {                    return direction.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value  || "".equals(value)) {                return null;            }            for (SubDelegation.DIRECTION direction : SubDelegation.DIRECTION.values()) {                if (direction.value.equals(value)) {                    return direction.code;                }            }            return null;        }        public static  Map<Integer, String> getEnumMap() {            if(map.size() == 0){                for (SubDelegation.DIRECTION direction : SubDelegation.DIRECTION.values()) {                    map.put(direction.code,direction.value);                }            }            return map;        }    }    /**1,市价委托:market<br>2,限价委托:limited**/    public enum STYLE {        /**1,市价委托:market**/        MARKET("市价委托",1),        /**2,限价委托:limited**/        LIMITED("限价委托",2);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private STYLE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (SubDelegation.STYLE style : SubDelegation.STYLE.values()) {                if (style.code == code) {                    return style.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value  || "".equals(value)) {                return null;            }            for (SubDelegation.STYLE style : SubDelegation.STYLE.values()) {                if (style.value.equals(value)) {                    return style.code;                }            }            return null;        }        public static  Map<Integer, String> getEnumMap() {            if(map.size() == 0){                for (SubDelegation.STYLE style : SubDelegation.STYLE.values()) {                    map.put(style.code,style.value);                }            }            return map;        }    }    /**1,全部完成:finished**/    public enum STATE {        /**1,完成:finished**/        FINISHED("完成",1),;        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private STATE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (STATE state : STATE.values()) {                if (state.code == code) {                    return state.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value  || "".equals(value)) {                return null;            }            for (STATE state : STATE.values()) {                if (state.value.equals(value)) {                    return state.code;                }            }            return null;        }        public static  Map<Integer, String> getEnumMap() {            if(map.size() == 0){                for (STATE state : STATE.values()) {                    map.put(state.code,state.value);                }            }            return map;        }    }    public DealOrder(){}    public DealOrder(Consumer<DealOrder> consumer){    consumer.accept(this);    }}