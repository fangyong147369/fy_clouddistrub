package com.mi.hundsun.oxchains.base.core.po.tpl;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 百分比风控模板实体信息<br> * * @author bin * @date   2018-04-13 10:28:11 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "百分比风控模板")@Table(name = "tpl_percent_control")public class PercentControl extends GenericPo<Integer> {    public static final String TABLE_NAME = "tpl_percent_control";		/**模板编号**/	@ApiModelProperty(value = "模板编号")	private String tplNo;	/**模板名称**/	@ApiModelProperty(value = "模板名称")	private String tplName;	/**百分比**/	@ApiModelProperty(value = "百分比")	private Double percent;	/**状态 1,启用:enable;0,停用:disable**/	@ApiModelProperty(value = "状态 1,启用:enable;0,停用:disable")	private Integer state;	@Transient	private String stateFormatter ;	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	/**1,启用:enable<br>0,停用:disable**/	public enum STATE {			/**1,启用:enable**/		ENABLE("启用",1),			/**0,停用:disable**/		DISABLE("停用",0);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}	    public PercentControl(){}    public PercentControl(Consumer<PercentControl> consumer){    consumer.accept(this);    }}