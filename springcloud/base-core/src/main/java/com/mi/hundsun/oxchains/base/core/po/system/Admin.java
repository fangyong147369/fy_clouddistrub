package com.mi.hundsun.oxchains.base.core.po.system;import com.fasterxml.jackson.annotation.JsonFormat;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;import javax.persistence.Table;import  java.util.Date;import  com.alibaba.fastjson.annotation.JSONField;/** * 系统用户实体信息<br> * * @author bin * @date   2018-04-11 04:20:40 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统用户")@Table(name = "s_admin")public class Admin extends GenericPo<Integer> {    public static final String TABLE_NAME = "s_admin";    /**用户名**/    @ApiModelProperty(value = "用户名")    private String name;    /**头像**/    @ApiModelProperty(value = "头像")    private String avatarUrl;    /**密码**/    @ApiModelProperty(value = "密码")    private String password;    /**1管理员，2投资人，3代理商**/    @ApiModelProperty(value = "1管理员，2投资人，3代理商")    private Integer type;    /**最后登陆时间**/    @ApiModelProperty(value = "最后登陆时间")    @JSONField(format="yyyy-MM-dd HH:mm:ss")    @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")    private Date lastLoginTime;    /**最后登录IP**/    @ApiModelProperty(value = "最后登录IP")    private String lastLoginIp;    /**备注**/    @ApiModelProperty(value = "备注")    private String remark;    /**1,管理员:T1<br>2,投资人:T2<br>3,代理商:T3**/    public enum TYPE {        /**1,管理员:T1**/        T1("管理员",1),        /**2,投资人:T2**/        T2("投资人",2),        /**3,代理商:T3**/        T3("代理商",3);        public final int code;        public final String value;        private static Map<Integer, String> map = new HashMap<Integer, String>();        private TYPE(String value, int code) {            this.code = code;            this.value = value;        }        public static String getValue(Integer code) {            if (null == code) {                return null;            }            for (Admin.TYPE type : Admin.TYPE.values()) {                if (type.code == code) {                    return type.value;                }            }            return null;        }        public static Integer getCode(String value) {            if (null == value  || "".equals(value)) {                return null;            }            for (Admin.TYPE type : Admin.TYPE.values()) {                if (type.value.equals(value)) {                    return type.code;                }            }            return null;        }        public static Map<Integer, String> getEnumMap() {            if(map.size() == 0){                for (Admin.TYPE type : Admin.TYPE.values()) {                    map.put(type.code,type.value);                }            }            return map;        }    }    public Admin(){}    public Admin(Consumer<Admin> consumer){        consumer.accept(this);    }}