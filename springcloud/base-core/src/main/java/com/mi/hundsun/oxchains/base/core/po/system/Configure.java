package com.mi.hundsun.oxchains.base.core.po.system;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import lombok.Data;import lombok.EqualsAndHashCode;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.util.function.Consumer;import javax.persistence.Table;import javax.persistence.Transient;import  java.util.Map;import  java.util.Date;import  java.util.HashMap;import  com.alibaba.fastjson.annotation.JSONField;/** * 系统参数表实体信息<br> * * @author bin * @date   2018-04-23 11:02:44 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "系统参数表")@Table(name = "s_configure")public class Configure extends GenericPo<Integer> {	public static final String TABLE_NAME = "s_configure";	/**名称**/	@ApiModelProperty(value = "名称")	private String name;	/**标识**/	@ApiModelProperty(value = "标识")	private String nid;	/**名称对应的值**/	@ApiModelProperty(value = "名称对应的值")	private String value;	/**1,系统底层配置:bottom;2,费率信息配置:fees;3,邮件/短信配置:msgTemplate;4,三方接口配置:third;5,附加功能配置:other**/	@ApiModelProperty(value = "1,系统底层配置:bottom;2,费率信息配置:fees;3,邮件/短信配置:msgTemplate;4,三方接口配置:third;5,附加功能配置:other")	private Integer type;	@Transient	private String typeFormatter ;	/**状态 1,启用:enable;2,禁用:disable**/	@ApiModelProperty(value = "状态 1,启用:enable;2,禁用:disable")	private Integer status;	@Transient	private String statusFormatter ;	/**备注**/	@ApiModelProperty(value = "备注")	private String remark;	public String getTypeFormatter() {		if(null == typeFormatter || "".equals(typeFormatter)){			return TYPE.getValue(getType());		}		return this.typeFormatter;	}	public void setTypeFormatter(String typeFormatter) {		this.typeFormatter=typeFormatter;	}	public String getStatusFormatter() {		if(null == statusFormatter || "".equals(statusFormatter)){			return STATUS.getValue(getStatus());		}		return this.statusFormatter;	}	public void setStatusFormatter(String statusFormatter) {		this.statusFormatter=statusFormatter;	}	/**1,系统底层配置:bottom<br>2,费率信息配置:fees<br>3,邮件/短信配置:msgTemplate<br>4,三方接口配置:third<br>5,附加功能配置:other**/	public enum TYPE {		/**1,系统底层配置:bottom**/		BOTTOM("系统底层配置",1),		/**2,费率信息配置:fees**/		FEES("费率信息配置",2),		/**3,邮件/短信配置:msgTemplate**/		NOTICE("邮件/短信配置",3),		/**4,三方接口配置:third**/		THIRD("三方接口配置",4),		/**5,附加功能配置:other**/		OTHER("附加功能配置",5);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private TYPE(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) {					return type.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) {					return type.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TYPE type : TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}	/**1,启用:enable<br>2,禁用:disable**/	public enum STATUS {		/**1,启用:enable**/		ENABLE("启用",1),		/**2,禁用:disable**/		DISABLE("禁用",2);		public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();		private STATUS(String value, int code) {			this.code = code;			this.value = value;		}		public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.code == code) {					return status.value;				}			}			return null;		}		public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {				return null;			}			for (STATUS status : STATUS.values()) {				if (status.value.equals(value)) {					return status.code;				}			}			return null;		}		public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATUS status : STATUS.values()) {					map.put(status.code,status.value);				}			}			return map;		}	}	public Configure(){}	public Configure(Consumer<Configure> consumer){		consumer.accept(this);	}}