package com.mi.hundsun.oxchains.base.core.po.quote;import com.mi.hundsun.oxchains.base.common.baseMapper.GenericPo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import lombok.EqualsAndHashCode;import javax.persistence.Table;import javax.persistence.Transient;import java.util.HashMap;import java.util.Map;import java.util.function.Consumer;/** * 交易代码对配置管理实体信息<br> * * @author db * @date   2018-06-10 03:23:44 */@Data@EqualsAndHashCode(callSuper = true)@ApiModel(description = "交易代码对配置管理")@Table(name = "ex_code_pair_config")public class CodePairConfig extends GenericPo<Integer> {    public static final String TABLE_NAME = "ex_code_pair_config";		/**交易所编号(逗号分隔-1,2,3)**/	@ApiModelProperty(value = "交易所编号(逗号分隔-1,2,3)")	private String exNumbers;	/**代码**/	@ApiModelProperty(value = "代码")	private String code;	/**基币 也即分区**/	@ApiModelProperty(value = "基币 也即分区")	private String baseCode;	/**类型 1,主流:main;2,非主流:non_main**/	@ApiModelProperty(value = "类型 1,主流:main;2,非主流:non_main")	private Integer type;	@Transient	private String typeFormatter ;	/**状态 1,启用:enable;0,停用:disable**/	@ApiModelProperty(value = "状态 1,启用:enable;0,停用:disable")	private Integer state;	@Transient	private String stateFormatter ;	/**是否在app主页显示 0,否:no;1,是:yes**/	@ApiModelProperty(value = "是否在app主页显示 0,否:no;1,是:yes")	private Integer isDisplayOnApp;	@Transient	private String isDisplayOnAppFormatter ;	/**限价最小下单数量**/	@ApiModelProperty(value = "限价最小下单数量")	private String limitMinAmount;	/**限价最大下单数量**/	@ApiModelProperty(value = "限价最大下单数量")	private String limitMaxAmount;	/**市价最小买入量**/	@ApiModelProperty(value = "市价最小买入量")	private String marketMinBuyAmount;	/**市价最大买入量**/	@ApiModelProperty(value = "市价最大买入量")	private String marketMaxBuyAmount;	/**市价最小卖出量**/	@ApiModelProperty(value = "市价最小卖出量")	private String marketMinSellAmount;	/**市价最大卖出量**/	@ApiModelProperty(value = "市价最大卖出量")	private String marketMaxSellAmount;	/**最小行情点位**/	@ApiModelProperty(value = "最小行情点位")	private String minQuotePoint;	public String getTypeFormatter() {	    if(null == typeFormatter || "".equals(typeFormatter)){		    return TYPE.getValue(getType());		}	    return this.typeFormatter;	}	public void setTypeFormatter(String typeFormatter) {	    this.typeFormatter=typeFormatter;	}	public String getStateFormatter() {	    if(null == stateFormatter || "".equals(stateFormatter)){		    return STATE.getValue(getState());		}	    return this.stateFormatter;	}	public void setStateFormatter(String stateFormatter) {	    this.stateFormatter=stateFormatter;	}	public String getIsDisplayOnAppFormatter() {	    if(null == isDisplayOnAppFormatter || "".equals(isDisplayOnAppFormatter)){		    return ISDISPLAYONAPP.getValue(getIsDisplayOnApp());		}	    return this.isDisplayOnAppFormatter;	}	public void setIsDisplayOnAppFormatter(String isDisplayOnAppFormatter) {	    this.isDisplayOnAppFormatter=isDisplayOnAppFormatter;	}	/**类型 1,主流:main<br>2,非主流:non_main**/	public enum TYPE {			/**1,主流:main**/		MAIN("主流",1),			/**2,非主流:non_main**/		NON_MAIN("非主流",2);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private TYPE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (TYPE type : TYPE.values()) {				if (type.code == code) { 					return type.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (TYPE type : TYPE.values()) {				if (type.value.equals(value)) { 					return type.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (TYPE type : TYPE.values()) {					map.put(type.code,type.value);				}			}			return map;		}	}		/**状态 1,启用:enable<br>0,停用:disable**/	public enum STATE {			/**1,启用:enable**/		ENABLE("启用",1),			/**0,停用:disable**/		DISABLE("停用",0);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private STATE(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (STATE state : STATE.values()) {				if (state.code == code) { 					return state.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (STATE state : STATE.values()) {				if (state.value.equals(value)) { 					return state.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (STATE state : STATE.values()) {					map.put(state.code,state.value);				}			}			return map;		}	}		/**是否在app主页显示 0,否:no<br>1,是:yes**/	public enum ISDISPLAYONAPP {			/**是否在app主页显示 0,否:no**/		NO("否",0),			/**1,是:yes**/		YES("是",1);			public final int code;		public final String value;		private static Map<Integer, String> map = new HashMap<Integer, String>();			private ISDISPLAYONAPP(String value, int code) {			this.code = code;			this.value = value;		}			public static String getValue(Integer code) {			if (null == code) {				return null;			}			for (ISDISPLAYONAPP isdisplayonapp : ISDISPLAYONAPP.values()) {				if (isdisplayonapp.code == code) { 					return isdisplayonapp.value;				}			}			return null;		}			public static Integer getCode(String value) {			if (null == value  || "".equals(value)) {					return null;			}			for (ISDISPLAYONAPP isdisplayonapp : ISDISPLAYONAPP.values()) {				if (isdisplayonapp.value.equals(value)) { 					return isdisplayonapp.code;				}			}			return null;		}			public static  Map<Integer, String> getEnumMap() {			if(map.size() == 0){				for (ISDISPLAYONAPP isdisplayonapp : ISDISPLAYONAPP.values()) {					map.put(isdisplayonapp.code,isdisplayonapp.value);				}			}			return map;		}	}	    public CodePairConfig(){}    public CodePairConfig(Consumer<CodePairConfig> consumer){    consumer.accept(this);    }}